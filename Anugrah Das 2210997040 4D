1.1
Using for
public class Main {
    public static void main(String[] args) {
        for (int i = 2; i <= 100; i++) {
            boolean isPrime = true;
            for (int j = 2; j * j <= i; j++) {
                if (i % j == 0) {
                    isPrime = false;
                    break;
                }
            }
            if (isPrime) {
                System.out.println(i);
            }
        }
    }
}

Using while
public class Main {
    public static void main(String[] args) {
        int i = 2;
        while (i <= 100) {
            boolean isPrime = true;
            int j = 2;
            while (j * j <= i) {
                if (i % j == 0) {
                    isPrime = false;
                    break;
                }
                j++;
            }
            if (isPrime) {
                System.out.println(i);
            }
            i++;
        }
    }
}


1.2
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the number of rows: ");
        int n = scanner.nextInt();
        printPascalsTriangle(n);
    }

    public static void printPascalsTriangle(int n) {
        for (int line = 0; line < n; line++) {
            for (int i = 0; i <= line; i++) {
                System.out.print(binomialCoeff(line, i) + " ");
            }
            System.out.println();
        }
    }

    public static int binomialCoeff(int n, int k) {
        int res = 1;
        if (k > n - k) {
            k = n - k;
        }
        for (int i = 0; i < k; ++i) {
            res *= (n - i);
            res /= (i + 1);
        }
        return res;
    }
}


1.3
public class Main {
    public static void main(String[] args) {
        int num = 5;
        long factorial = calculateFactorial(num);
        System.out.println("Factorial of " + num + " = " + factorial);
    }

    public static long calculateFactorial(int n) {
        if (n == 0) {
            return 1;
        } else {
            return n * calculateFactorial(n - 1);
        }
    }
}

Performance:
Loop-based version: The time complexity is O(n), where n is the input number. This is because it performs n multiplications.
Recursive version: The time complexity is also O(n) for the same reason. However, the recursive version has additional overhead due to the recursive function calls, which includes the cost of pushing and popping function calls on the call stack. Therefore, the recursive version may be slower than the loop-based version for large inputs.

Resource Usage:
Loop-based version: The space complexity is O(1), which means it uses a constant amount of memory. This is because it only needs a single variable to store the intermediate results of the factorial calculation.
Recursive version: The space complexity is O(n) because it uses the call stack to store the intermediate results of the factorial calculation. Each recursive call to the function is added to the call stack and takes up memory. Therefore, the recursive version uses more memory than the loop-based version.


1.4
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter a number:");
        int number = scanner.nextInt();
        System.out.println("Prime factors of " + number + " are:");
        primeFactors(number);
    }

    public static void primeFactors(int number) {
        for (int i = 2; i <= number; i++) {
            if (number % i == 0) {
                boolean isPrime = true;
                for (int j = 2; j <= Math.sqrt(i); j++) {
                    if (i % j == 0) {
                        isPrime = false;
                        break;
                    }
                }
                if (isPrime) {
                    while (number % i == 0) {
                        System.out.println(i);
                        number /= i;
                    }
                }
            }
        }
    }
}



2.1
public class Calculator {
    public static void main(String[] args) {
        int result = 0;
        int n1 = Integer.parseInt(args[0]);
        String operator = args[1];
        int n2 = Integer.parseInt(args[2]);
        switch (operator) {
            case "+":
                result = n1 + n2;
                break;
            case "-":
                result = n1 - n2;
                break;
            case "*":
                result = n1 * n2;
                break;
            case "/":
                if (n2 != 0) {
                    result = n1 / n2;
                } else {
                    System.out.println("Error! Dividing by zero...");
                    return;
                }
                break;
            default:
                System.out.println("Error! Invalid operator. Only +, -, * and / are allowed.");
                return;
        }

        System.out.println(n1 + " " + operator + " " + n2 + " = " + result);
    }
}


2.2
public class PasswordGenerator {
    public static void main(String[] args) {
        if (args.length != 2) {
            System.out.println("Usage: java PasswordGenerator length characterSets");
            return;
        }
        int length = Integer.parseInt(args[0]);
        String characterSets = args[1];
        String lowercaseLetters = "abcdefghijklmnopqrstuvwxyz";
        String uppercaseLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String numbers = "0123456789";
        String specialCharacters = "!@#$%^&*()_+-=[]{}|;:,.<>?";
        String characters = "";
        if (characterSets.contains("l")) {
            characters += lowercaseLetters;
        }
        if (characterSets.contains("u")) {
            characters += uppercaseLetters;
        }
        if (characterSets.contains("n")) {
            characters += numbers;
        }
        if (characterSets.contains("s")) {
            characters += specialCharacters;
        }
        if (characters.isEmpty()) {
            System.out.println("Error! Invalid character sets. Use l for lowercase letters, u for uppercase letters, n for numbers, and s for special characters.");
            return;
        }
        StringBuilder password = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
            char deterministicChar = characters.charAt(i % characters.length());
            password.append(deterministicChar);
        }

        System.out.println("Generated password: " + password.toString());
    }
}



3.1
import java.util.Scanner;

// Java code using if-else-if
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the score: ");
        int score = scanner.nextInt();
        if (score >= 90 && score <= 100) {
            System.out.println('A');
        } else if (score >= 80 && score < 90) {
            System.out.println('B');
        } else if (score >= 70 && score < 80) {
            System.out.println('C');
        } else if (score >= 60 && score < 70) {
            System.out.println('D');
        } else {
            System.out.println('F');
        }
    }
}



3.2
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the lengths of the sides of the triangle: ");
        int side1 = scanner.nextInt();
        int side2 = scanner.nextInt();
        int side3 = scanner.nextInt();

        if (side1 == side2 && side2 == side3) {
            System.out.println("The triangle is equilateral.");
        } else if (side1 == side2 || side2 == side3 || side1 == side3) {
            System.out.println("The triangle is isosceles.");
        } else {
            System.out.println("The triangle is scalene.");
        }
    }
}



3.3
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the amount: ");
        double amount = scanner.nextDouble();
        System.out.println("Enter the source currency (USD, EUR): ");
        String sourceCurrency = scanner.next();
        System.out.println("Enter the target currency (USD, EUR): ");
        String targetCurrency = scanner.next();

        double convertedAmount = convertCurrency(amount, sourceCurrency, targetCurrency);
        System.out.println("Converted amount: " + convertedAmount);
    }

    public static double convertCurrency(double amount, String sourceCurrency, String targetCurrency) {
        double rate = 1.0;
        switch (sourceCurrency) {
            case "USD":
                switch (targetCurrency) {
                    case "EUR":
                        rate = 0.85;
                        break;
                }
                break;
            case "EUR":
                switch (targetCurrency) {
                    case "USD":
                        rate = 1.18;
                }
                break;
        }
        return amount * rate;
    }
}



4.1
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the number of elements in the array: ");
        int n = scanner.nextInt();
        int[] array = new int[n];
        System.out.println("Enter the elements of the array: ");
        for (int i = 0; i < n; i++) {
            array[i] = scanner.nextInt();
        }
        System.out.println("Enter the number of positions to rotate: ");
        int positions = scanner.nextInt();
        System.out.println("Enter the direction of rotation (L for left, R for right): ");
        char direction = scanner.next().charAt(0);

        if (direction == 'L') {
            rotateLeft(array, positions);
        } else if (direction == 'R') {
            rotateRight(array, positions);
        }

        System.out.println("Rotated array: ");
        for (int i = 0; i < n; i++) {
            System.out.print(array[i] + " ");
        }
    }

    public static void rotateLeft(int[] array, int positions) {
        for (int i = 0; i < positions; i++) {
            int temp = array[0];
            for (int j = 0; j < array.length - 1; j++) {
                array[j] = array[j + 1];
            }
            array[array.length - 1] = temp;
        }
    }

    public static void rotateRight(int[] array, int positions) {
        for (int i = 0; i < positions; i++) {
            int temp = array[array.length - 1];
            for (int j = array.length - 1; j > 0; j--) {
                array[j] = array[j - 1];
            }
            array[0] = temp;
        }
    }
}



4.2



4.3
public class Main {
    public static void main(String[] args) {
        int N = 2;
        int mat[][] = {
            {1, 2},
            {3, 4}
        };
        rotate90Clockwise(mat, N);
        printMatrix(mat, N);
    }
    static void rotate90Clockwise(int[][] mat, int N) {
        for (int i = 0; i < N / 2; i++) {
            for (int j = i; j < N - i - 1; j++) {
                int temp = mat[i][j];
                mat[i][j] = mat[N - 1 - j][i];
                mat[N - 1 - j][i] = mat[N - 1 - i][N - 1 - j];
                mat[N - 1 - i][N - 1 - j] = mat[j][N - 1 - i];
                mat[j][N - 1 - i] = temp;
            }
        }
    }
    static void printMatrix(int[][] mat, int N) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++)
                System.out.print(mat[i][j] + " ");
            System.out.println();
        }
    }
}



4.4
public class Main {
    public static void main(String[] args) {
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        int rows = matrix.length;
        int cols = matrix[0].length;
        for (int i = 0; i < rows; i++) {
            int rowSum = 0;
            for (int j = 0; j < cols; j++) {
                rowSum += matrix[i][j];
            }
            System.out.println("Sum of row " + (i + 1) + " = " + rowSum);
        }
        for (int j = 0; j < cols; j++) {
            int colSum = 0;
            for (int i = 0; i < rows; i++) {
                colSum += matrix[i][j];
            }
            System.out.println("Sum of column " + (j + 1) + " = " + colSum);
        }
    }
}



4.5



4.6
public class Main {
    public static void main(String[] args) {
        int[][] matrix = {
            {2, 7, 6},
            {9, 5, 1},
            {4, 3, 8}
        };

        boolean isMagicSquare = checkMagicSquare(matrix);
        System.out.println("Is the given matrix a magic square? " + isMagicSquare);
    }

    public static boolean checkMagicSquare(int[][] matrix) {
        int n = matrix.length;
        int magicConstant = 0;
        for (int j = 0; j < n; j++) {
            magicConstant += matrix[0][j];
        }
        for (int i = 0; i < n; i++) {
            int rowSum = 0;
            int colSum = 0;
            for (int j = 0; j < n; j++) {
                rowSum += matrix[i][j];
                colSum += matrix[j][i];
            }
            if (rowSum != magicConstant || colSum != magicConstant) {
                return false;
            }
        }
        int diagSum1 = 0;
        int diagSum2 = 0;
        for (int i = 0; i < n; i++) {
            diagSum1 += matrix[i][i];
            diagSum2 += matrix[i][n - i - 1];
        }
        if (diagSum1 != magicConstant || diagSum2 != magicConstant) {
            return false;
        }

        return true;
    }
}
